commit e0296db0eebd69a314c21c269dc32521b4cb8709
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Sep 10 16:08:02 2022 +0800

    Add docs for Frangipani

commit 8a414f0cf3f66c725e490e7563361900d9c2a23b
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Sep 10 15:02:56 2022 +0800

    Raft: Bug fix.
    I add `Round` in `AppendEntries`-related functions.
    Follower will abort old heartbeats, and the leader will NOT
    process heartbeat results from old rounds.

commit 02e516720fe5bccd28f33822dfba9c656e9d7f93
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Sep 10 11:36:04 2022 +0800

    ShardKV server: Bug fix.
    line 397: When dup "ReceiveShards" detected, I should let it
        update `kv.appliedIndex` instead of return.
    ----
    Update README.md: add report for frangipani.

commit 5f994afe4ab719e386c964a369d7ddc48a48894d
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Sep 9 10:10:53 2022 +0800

    Update raft, frangipani:
    1. Turn on debug options. I found there were some bugs.
    2. For `frangipani::client`, I slightly tuned the `PutAppend` rate.
       Previously I set the rate to 10ms/op, which is too slow.
    3. For `frangipani::server`, the `Get` op should be processed when
       the leader is ready to provide read service.
       Besides, I optimized the structure of applying commands from
       `applyCh`.

commit 7dfff50cbc79f45237660d8a435b5b5111d56dcb
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Sep 5 17:47:56 2022 +0800

    Turn off debug mode in all projects.

commit ef0da377e86ed3c73ac835a21856184d058b07b5
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Sep 5 17:25:19 2022 +0800

    Frangipani completed, passed all tests.
    
    NOTE: I add `sleep` statements before client `PutAppend`. Remove
    the statement can unleash the full performance of Frangipani.
    
    However, be careful to do this! Many tests will fail because the
    performance is so strong that it consumes too much memory, causing
    the OS to kill the testing program.

commit 844ff2e8d6d72e7e405e9b337a19c045d70426f4
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Sep 5 15:53:39 2022 +0800

    Raft: small bug fix.
    In `InstallSnapshot`, after sending the snapshot to the upper
    service, Raft should not check term numbers.
    Otherwise, if term number change happens at the same time when
    sending snapshots, `InstallSnapshot` will stop post jobs, causing
    stale logs remaining and abnormality when `Snapshot` wants to
    translate indices.

commit d728009d455cc1599a7c7d47b8447dc0447339a2
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Sep 4 17:33:43 2022 +0800

    frangipani:
    
    1. Client should delete kv pairs after it unlocks the key.
    2. Prettify client logging.
    3. Add linearizable test under unreliable network conditions.
       (have not passed it yet)

commit 70b37147b83b8d37ff051c34ba49a4dae2673975
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Sep 2 21:06:58 2022 +0800

    Pass basic linearizable tests.
    -------
    Add suitable tests for frangipani:
        Tests should focus on random keys, which is the weakness of
        frangipani.
    -------
    Main changes:
      1. Optimize the logging in client. I aim at minimizing
         unnecessary logs.
      2. Optimize `LockManagerClient`. The client should distinguish
         lock status and expiration status.
      3. The command sequence number for flushing(put) and getting (get)
        should be seperated because `put` will modify server's `kvMap`,
        but `get` only modifies server's `lockManager`. Besides, the
        `put` and `get` may interleave, which makes it necessary to
        seperate them to avoid missing executions.
      4. For kvserver, adjust necessary functions to the change of
         seperated `appliedIndex`.

commit 0b3cec1ab458526cac5587cf9aaf26773eac4ef6
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Sep 1 20:44:43 2022 +0800

    Add comments in `server.go` because there is a race condition.
    However, the race condition does NOT affect correctness.

commit 48c94e5a85d14c659ccd31184f7955fa2a50a7dc
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Sep 1 18:15:51 2022 +0800

    Frangipani:
       Passed SpeedTest in 0.6s.
       Still many problems on both client side and server side.

commit 5fe5248a4ee3e946a3d174630dce4630617cb821
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Sep 1 18:12:31 2022 +0800

    Fix readReadyIssues: See the comments in raft.go:131.
    Modify kvservers to adjust to the change of `IsReadReady` API.

commit 0b41f0ae87275d707aa0a989094bd5190b316e66
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Aug 31 18:52:45 2022 +0800

    Start developping frangipani-style kvserver.
    Modified `server.go`.
    Some framework setup.

commit fcf24fab8a62ca43686cfd8bf370f578543545d1
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Aug 30 20:32:35 2022 +0800

    Raft:
    Modify the code relevant to index translation.
    Add boudary check in `translateToInternalIndex()`,
    Add warning output on translation failure.

commit c20af9a36bfb84e4b67ea3abb89384f46c5692aa
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Aug 30 13:44:56 2022 +0800

    Raft:
    Add boudary check in `InstallSnapshot` and `Snapshot`.

commit 862af6739c0e419566d9ee6b542a798fb2071b37
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Aug 28 14:52:40 2022 +0800

    ShardKV: try to eliminate dup when retrieving shards.
    Update report for lab 4.

commit 59f1da4c6ec83329f61e11143780122e67860279
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Aug 28 12:49:48 2022 +0800

    ShardKV: Fix a bug of transferring shards.

commit 406b94962db604595eaa36c9fae596d27683c060
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Aug 27 13:45:59 2022 +0800

    Lab4 : Passed all tests. Need further testing.
    ---
    Raft:
    Fix corner cases in `Snapshot` and `InstallSnapshot`. Specifically
      1. It is possible to advance rf.commitIndex while installing
         snapshot. For example, when two same `InstallSnaphot`s come
         at the same time, one finished before the other grab rf.mu
         again after sending its snapshot.
      2. When taking snapshot, before checking if the raft took the
         same snapshot before, I should ensure the log is non-empty.
    ---
    shardkv:
    After the server received all shards, it will issue RPCs to all
    other groups with its config version and the shards it is
    responsible for. Other groups will delete these shards if they have
    older config versions.

commit 8566e38fb10791013a0f93ca9474e2e5a1917f99
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Aug 26 13:44:49 2022 +0800

    ShardKV:
    
    make all members of `InMemoryShard` private, provide more APIs for
    interacting.
    
    Set up framework for cleaning shards.

commit 9cea7b187a62d6105021d655bd6ccee201dca169
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Aug 26 13:25:25 2022 +0800

    Modify shardctrler and shardkv to adopt raft changes.

commit b3bd9a4af66236b17cf86d46ec99966fd3cfbf83
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Aug 26 12:35:20 2022 +0800

    Raft & KV Raft:
    update the design of ReadReady.

commit 12bae81c5f4b108bf264251f40ae5df0488efcde
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Aug 25 16:57:59 2022 +0800

    Lab 4:
    Passed challenge 2.

commit 580b23de3c58b18abdd2425fc82b6161bc78b61e
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Aug 25 12:32:18 2022 +0800

    ShardKV:
    * Key Fix: `monitor` goroutine should never return. Now I passed
        Unreliable test 10 times. Should do further tests.
    ------
    Add struct `InMemoryShard` for server.
    Set up framework for challenges.

commit 667905303655b0b1b02f2bf1fe7df2416c56dd98
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Aug 25 11:03:27 2022 +0800

    ShardKV:
    Amended the transfer procedures. Now shards can correctly transfer
    between groups.
    I decoupled leadership monitor and config change monitor so that
    the serer will not be trapped in waiting to retrieve shards even
    when it is no longer the leader.
    -----
    Next:
    The initial design was to address challenges as well. However,
    there were some flaws in RPC logics. For example, I should not
    allow write ops to execute before I receive the corresponding
    shards.

commit d6b094e60e9f66938c2986d3425b84e3675eb2b5
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Aug 24 20:24:20 2022 +0800

    Lab 4A: Redesigned shardctrler.
    Add some tests to ensure correctness of shardctrler.
    ----
    The use of a temporary config is not a feasible solution.
    It is necessary to design an algorithm to deterministically balance
    the shards among groups.

commit 102f4622a246e7dd8b5caf8b028a607bb1b21a54
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Aug 24 11:10:38 2022 +0800

    lab 4A: Fix a bug in shardctrler.
    
    Previouly I used a temporary variable `currentCfg` to represent the
    newest UNAPPLIED config in leader.
    It was unsafe if leader changed because the follower did not know
    what the newest UNAPPLIED config was, thus causing errors when
    operating on some stale configs.
    
    To amend it, I
    1. add `readReady` check before every RPC stub so that the leader
       is at the newest state when it operates on `currentCfg`.
    2. when `applyCmd`, update `currentCfg` if it was behind the config
       being applied.

commit 234fa78a96209c07824e509a17179fada72ef249
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Aug 23 10:29:48 2022 +0800

    Raft:
        Remove the `Command` field of the vestigal log after taking a
        snapshot. `Command` may occupy a large amount of memory, but
        it will never be used again after the snapshot.
    -----
    ShardKV:
        Remove the periodic `Snapshot` in the `monitor` goroutine,
        since `Snapshot` after applying command is enough to clean up
        memory.

commit 986dbca6f48747ef9d05eb7bf6398f4bc3d3cba1
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Aug 23 09:47:36 2022 +0800

    Lab 4: Passed all tests under reliable network
    ---
    Raft:
        Delete an unnecessary comparison in `AppendEntries`, because
        not all commands are comparable.
    ---
    ShardKV:
    Changed how shards are moved.
       Initially, I picked the design that once a config change is
       detected, the group leader will send its shards to all
       receivers.
       However, this design introduced more complexity: A group should
       wait for other groups to send it shards, and it should send
       shards to other groups.
    
       Now the groups will proactively ask other groups for shards in
       new config.
       (TODO) After shards are retrieved, the retriever can call
       retrievee again to notify retrievee to clean these shards.
    ---
    Next:
       Double check the shard movement procedures so that even
       under unreliable networks, which means that leader reelection
       could occur when it is retrieving shards, the system still
       ensure correctness.

commit b982a4502bb90814d46254790538ee7d77c65fb2
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Aug 21 13:20:33 2022 +0800

    Lab4: Pass TestJoinLeave.
    ---
    After `PutAppend` RPC was waken up, it should check whether the
    leader still serves the shard. If not, immediately reply
    ErrWronGroup so that the client will submit commands to the
    corresponding group.

commit a4d97645529394fb5128cf56d2961df10bf9f355
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Aug 21 11:34:12 2022 +0800

    Lab4: Passed TestStaticShards.
    -------
    Some redesigns:
    1. All config updates will go through log, including ReceiveShards,
       change `kv.config`.
    2. I will send an end command when changing `kv.config`.
    3. Amended transfer functions. However, I should pay attention to
       it when testing under unreliable networks.

commit 7eaff7b18947824b843169a91d33180e140bb209
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Aug 21 09:56:27 2022 +0800

    Lab4: server redesign && Implemented-receive shard function.
    -----
    1. AppliedSeqNo will be maintained within a shard PER client. Any
       pending RPCs should consult corresponding shard to know whether
       their commands have been applied.
    2. ReceiveShard will go through log to ensure crash recovery.
    3. Only the leader is responsible for transfer and receive shards.
    -----
    TODO:
    1. Amend the transfer shards functions.
    2. (For 4B) Look closely at snapshot related functions such as
       `encodeState` and `installSnapshot`. Because some structures
       are changed in ShardKV, the snapshot state should be
       reconsidered.
    3. (For challenge) After the leader knows that other groups have
       successfully received its shards, it should notify all followers
       (and itself) to discard these shards.

commit 6481c524b6769b86ca447a8091de180503361d7a
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Aug 20 11:45:00 2022 +0800

    update docs for lab 2 & 3

commit f130bfad8b3456ec412db60231d8682c59b93143
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Aug 20 10:39:34 2022 +0800

    ShardKV: Framework setup.
    I made each shard self-maintained so that it can transfer
    between servers conveniently. Specifically:
      1. Each shard has APIs for `Get`, `Put`, and `Append` to
         conveniently execute kv ops.
      2. Each write op should demonstrate the clientID and the SeqNo
         to eliminate dups.
      3. Client now will keep track of seqNo for each shard.
    
    Next: Amend the transfer procedure:
      1. ONLY the leader is responsible for shards-transfer.
      2. Every shards transfer should go through log so that it can
         recover from crash.(raft will replay all logs when restarted)

commit 5bd034cbe0fcda11944a850ed0ede6526abd68f5
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Aug 16 10:45:54 2022 +0800

    Server side set up.
    Passed the first test

commit 31f57b068005161179c0e6fbb1b81fc3f17bf8db
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Aug 16 09:54:05 2022 +0800

    ShardKV: Finished client side

commit 9d32e98685df4ad66cfd9a42fbc55abeb8647451
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Aug 7 19:17:32 2022 +0800

    Modify kvraft to conform newer go standards. i.e remove `ioutil`
    Also fix a small bug in kvraft server.
    Previously I forgot to reset `readReady`.

commit 2d1bd140b4c4ddbdf2d20e04984378603ca8d787
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Aug 4 10:18:30 2022 +0800

    Slight changes to upper servers. Now `Get` will execute when
    `applier` sets the `readReady` bit.
    Add test scripts in Makefile.

commit 26f169493bbb1b28ce05fb69baaf14608db74e1b
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Aug 3 10:56:01 2022 +0800

    Adjust the shardctrler server according to the change of Raft
    Fix a bug in rebalace()

commit 41f06d56e79b5999b7101f975c1a5f459e49b7c1
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Aug 2 15:37:25 2022 +0800

    Use another mechanism to ensure that the leader provides read
    service only after it executed all commands before its empty log.
    
    Previous implementation relied on time delay to achieve this.
    However, it was unreliable.

commit 9ef78f4e7c7bf3b8f2f51b16841e2de6935736d5
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 27 14:31:10 2022 +0800

    Amendment to previous commit.
    The `Get` should sleep a little while AFTER ReadReady to ensure
    that all commands are applied

commit 58879b26b0b36b1099290cdb8e505336e46a7eb2
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 25 17:30:18 2022 +0800

    Modify `kvraft` and `shardctrler`
    ----
    The server implementation has a bug. A `Get` operation
    should wait for a little while to avoid racing with `applier`.
    This will cause a problem when a leader just got elected. When it
    sets `ReadReady` to true, it is possible that the commands in the
    previous term was captured but didn't get applied in the kv server.

commit ff8d63ab829bf36a7aaea2ca9222a8fba0778220
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 25 12:50:23 2022 +0800

    A better algorithm to rebalance config shards

commit b3b0f7de0f406824a8ad7aa358960d84762e53ec
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 24 16:15:02 2022 +0800

    Lab4A passed

commit 3b46aed65e89a356b97f6d654e7294824e80c4e5
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 23 17:18:05 2022 +0800

    fix a bug in previous commit:
    Server should NOT hold lock when waiting for ReadReady

commit 34c79b5cda37efc0296b2097a41ce2f9026f29fc
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 23 14:29:23 2022 +0800

    Modify raft and kvraft so that it can provide instant `Get`
    instead of replicating `Get` before return.

commit 872b665f37265fcdf970ef37d9ecba666e418ba6
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 23 09:01:48 2022 +0800

    Fix a race problem in kvraft/server.go

commit a8ee40a7f40656d1fae3416c2142c4facb7e5a92
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Jul 22 16:42:30 2022 +0800

    Add docs for another bug found during KVRaft testing.
    Also optimize the snapshot. KV Sever will not take snapshots
    if no message read from `applyCh`

commit 9995e776336a30012eb7c2f1199b683d4ddd5e1f
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Jul 21 17:29:58 2022 +0800

    Raft: Fixed a race condition when sending heartbeat
    Because slices are references, I have to deep copy them
    when using them as arguments in heartbeat.

commit 7d1a38c674f02a919ce96b2a1fcd91276e0a0bb7
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Jul 21 17:02:32 2022 +0800

    Add report for lab3

commit c599facf0831e31766439d102f0238b19054ee0c
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Jul 21 13:38:12 2022 +0800

    Change a function parameter `*map` to `map`
    Because in Go, `map`s are references.

commit aa57b1a51633f1554678d6c00725172644584889
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Thu Jul 21 09:58:45 2022 +0800

    Pass all Lab3 tests.
    Add features in client side so that it can detect SpeedTest.
    Under `SpeedTest`, it will use batch `PutAppend` to increase speed
    However, batch `PutAppend` CANNOT guarantee linearizability!!!

commit 81085589fd13e954c154a40ac8298b5163930295
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 20 15:12:49 2022 +0800

    Naive implementation of Lab3
    Always gaurantee linearizability, but fail `SpeedTest`

commit c385bbe1ad1d9ba12f09af0b055e0987fe5839ce
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 20 15:11:01 2022 +0800

    Changed the log checking order in `raft.go::AppendEntries`

commit 497d3b80dadaf1a56db27e5cd1a3d6f87ce5f15b
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 18 12:46:39 2022 +0800

    Slightly improve the performance of raft

commit 18fcec3d8dd4c7e14eb2d8b1d5dad48bd7d2b119
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 18 11:49:43 2022 +0800

    client's `Get` will wait until all previous `Put`s executed

commit 04c35ce59dd2beaecec01f2366edaa0acbd43228
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 18 11:12:02 2022 +0800

    Passed all tests for once
    ---
    Fix a minor data race in `raft.go` with the logging statements
    Add mechanism to trim the server's log, `nextSeqNo` will always
    points to `cmdLog[0]`

commit 420e195caaa725ed49aa3f4aae8a1aaa56d7c191
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 17 19:43:19 2022 +0800

    Passed all tests in lab 3 EXCEPT snapshot size
    I should trim server's state, namely each clerk's `cmdLog`

commit 41c1e96c06caf61ea9bfd9b97a4b342a2c1aa49f
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 16 16:56:15 2022 +0800

    Modify servers and clients so that
    I can pass both SpeedTest and LinearizableTest.
    The two tests are conflict because
    SpeedTest requires the client working in async mode;
    while LinearizableTest requires the client working in sync mode.
    
    In this commit, the server will tell the client to work asynchronously
    when there's only one client

commit 1b4a340ce0b3abde2adac7ebd5db8aee72301833
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 16 15:46:35 2022 +0800

    Delete unnecessary data structures.
    I do not need to retrieve execution results from `execLog`,
      and `Get` only need to query once it is applied.

commit 71f8ccc0789992db735ea70120e70d2331bfd81e
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 13 17:45:31 2022 +0800

    Primarily passed all 3A tests before Persist.
    ---
    Fix some bugs in previous commit:
    1. Cannot terminate `starter()`.
    2. After `submitOp`, return true only if the op was applied.
    3. In `submitOp`, allow resubmission.
    All these fixes want to ensure that a command will be `start()`
      and not got blocked by previous un`start()` commands

commit 4123a2b7144f20041f0b2e5aa2849a560f3b4bab
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 13 16:07:17 2022 +0800

    Modify client and server so that `PutAppend` supports two phase op.
    ---
    When client call `PutAppend`, it should return when the server
    `start(op)` so that it can send next command immediately.
    However, clients should wait until the command is applied.
    
    To address this problem, the client will first call `PutAppend`,
    and the server will reply when it submits the command;
    the client then immediately call `PutAppendRetrieve`, and wait for
    the server to apply its command.

commit f9b1a5d208f981e076496ebfd9f1f9dcf45d9dc0
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 13 14:52:03 2022 +0800

    Primarily passed tests under unreliable network.
    The main changes are:
    1. Server will cache requests from future, and submit them when
       it's their term. I use the slice instead of some rather
       advanced data structures such as red-black tree.
    2. The submission, start(), and apply() of a command must be
       asynchronous. Each starter() thread will monitor all
       requests from one clerk. When there're new commands coming in,
       the `Put` or `Get` RPC will submit these commands and wake up
       the starter() to start() sequential commands.
    3. Add a monitor to constantly check server's leadership. If the
       server is no longer a leader, it should notify all waiting RPCs
       to return `ErrWrongLeader`. We cannot rely on RPCs to do this job
       because if all clients are waiting for reply and not issueing
       RPCs, and the server reverts to a follower, then the whole system
       will stop work.

commit b1e141d2d5e61e718d6bfb092321ed8b997d817c
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 13 11:50:26 2022 +0800

    Now server will cache future commands
    also supports concurrent multi-clients

commit 5e2ea2e709d3bec226d8751f78de7cfa68746787
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jul 12 17:16:50 2022 +0800

    Pass basic test and speed test. Add SeqNo to achieve linearizability

commit 2f738c0232fe2c39e13fb251cc0635ff301405bb
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 10 19:00:33 2022 +0800

    Modify the clerk side so that it suppoerts asynchronous requests
    Added `ClerkID` and `SeqNum` fields in RPC arguments to achieve
      exactly-once command.

commit e580358a8456991943306ebc298461e20ed6a7ff
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 10 16:01:07 2022 +0800

    Fix a data race in `applier()` and `AppendEntries()`
    Now I do a deep copy so that the underlying array of slices
    will never be accessed concurrently by the two threads

commit 976cc3e4cc65e9809e0c8f0bcfe19278c1dd304d
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 10 09:36:21 2022 +0800

    Passed lab 3A, basic test

commit c822388767a48d1a9a3bde909b9ac97cdf285669
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 10 09:34:44 2022 +0800

    The `leaderID` may not get updated, fix it

commit ce58abd9aa2469d51de6d3caf389e34f81b09720
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 9 14:18:52 2022 +0800

    Update github workflow configs

commit 188eb4339f1ac8c99f9fd0ff64de7f7c44a11fb7
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Jul 8 17:26:14 2022 +0800

    Minor improvement to `raft.go`
    Now leader will do clean up jobs when `exitCh` get a signal.
    This is a more unified way to do these jobs.

commit 52439eccaf38e5d78235da5b745eb67331caf582
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jul 6 10:37:20 2022 +0800

    Add workflow triggers to my public repo's testing workflows

commit 72c812149382db582f992ce3e3070ea8a98ec9d4
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jul 5 13:54:48 2022 +0800

    Add github action auto test for Raft lab

commit 0a136992c5fcdf9d0cd6c6fd461c4fcab728f374
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jul 5 12:00:37 2022 +0800

    Wrap up all in lab 2

commit 2c6553093dfd8c69e537caf2d98b290979545635
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 4 14:13:48 2022 +0800

    Finished lab2.md

commit 022a99b9c99be8e2d29764b064ed458ce5689bb9
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 4 14:02:51 2022 +0800

    Bug Fix:
    I made the exit and change of state atomic
     to avoid AppendEntries assertion failure

commit 8a562637605927daefb134bf3b651ec12e2afd5a
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 4 11:43:31 2022 +0800

    Remove the assertion. It's not necessary

commit af0771ade7e460e33762e7c1aa9b826062609954
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 4 10:32:30 2022 +0800

    Fix the previous commit
      that a leader does not immediately send heartbeats upon election

commit f5e5a70c8b284954fd5510259d292b2cace01bb2
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jul 4 09:04:20 2022 +0800

    Finished some parts of report
    Add test logs
    Add `calc_log.py` to process the log and form a markdown table
    Improvement to leader() thread. Now the thread will exit immediately
      once exitCh signals.

commit 825a9a074072ef7490a167a25cfeb1705d8aa7e2
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 3 19:02:39 2022 +0800

    Add docs to myBugs.md

commit f7b015c9378feb43cccf88bdd4bbf23b7bf002ff
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 3 20:43:42 2022 +0800

    Optimize the logic of election and heartbeat
    Add strong checks against split brain.
    Change the code to prevent split brain in election and heartbeat

commit c18166e66c8752242aebb88c52473eebd770f645
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 3 15:55:49 2022 +0800

    Amend the previous commit:
    Add another layer of check in Start()
    Otherwise leaders for old term can append logs in new term

commit adb9f1065f07c5d0801e80fc89ff2c72a6e18284
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jul 3 10:11:21 2022 +0800

    Bug Fix:
    Be careful about resetting leaderID!
    If it's reset, the leader() thread will exit.
    The problem is that the vestigal leader thread detected network partition,
    thus resetting leaderID will cause the current leader thread to exit.
    This bug is not fatal, but it CAN disturb the normal operations,
    and even cause some tests timeout

commit cea4c3c090fdca7772c51dee54e12e39751b9ef9
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 2 13:39:45 2022 +0800

    Bug fix(2D):
    After taking or installing a snapshot,
    I should update the `nextLogIndex`

commit a89622513bed67be8e0f5da0c9d0eae23b186d89
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 2 10:30:44 2022 +0800

    Update test-many.sh

commit a05e5588cd54c48105b2efb475d0728d209ca08b
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jul 2 08:02:35 2022 +0800

    Fix the bug:
    If all logs are empty leader log,
    then I should adjust the nextLogIndex to 1.
    Otherwise, there may be inconsistencies

commit 3fb84d35f216cc0f3ec506edcd572381a8defd8c
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Jul 1 19:45:38 2022 +0800

    Relaxing the timeout parameter in testing script.
    Because the whole test takes at least 6 minutes

commit eb565e59ebd4799403164b8580c5e6a9ea404c4a
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Jul 1 19:38:24 2022 +0800

    Pass ALL TESTS in Raft for once
    Need further rigourous test
    ---
    One bug fix:
    When a raft reads back persistent data,
    it should also set lastApplied to rf.snapshotIndex
      so that applier() thread will NOT apply logs that
      were already applied

commit 7ba6fe56fcba12eead0800bd770515b3794f49cd
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Jul 1 19:21:42 2022 +0800

    Implement the InstallSnapshot RPC:
    1. Plug the call of InstallSnapshot into heartBeat()
    2. Integrate it with my indexing schema designed for upper service
    3. Refactored Encoding code
    ---
    Besides, I fixed some minor bugs:
    line 907: When a leader falls back to follower, it should reset voteFor
    line 552: Leader should initialize the matchIndex to -1
      because there's no match

commit b41776f157fca7d0579626019479158f71a10023
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Jul 1 14:17:45 2022 +0800

    Pass BasicSnapshot
    1. Add snapshotIndex to Raft so that it knows where the log begins.
    2. Modify the persist() and ReadPersist() to persist the snapshotIndex.
    3. Add dummy InstallSnapshot() RPCs and necessary structs.
    4. Implement Snapshot() to trim logs before index and persist snapshot.
    5. Change the other code to fit the snapshotIndex

commit 0ee255ce142a60637760a1848e6f37ce6cb1e774
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri Jul 1 09:02:54 2022 +0800

    Optimize the election procedure
    I fix every round's time to 1 second.
    The peer will start voting
    at a random point in the 100~600ms in each round.
    This helps reduce the likilihood that an outdated peer interferes
    the voting process
    by easily increase its term number.

commit 4fc57902c1ca1343aa78e3ba672cad36c0e4b474
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jun 29 12:11:13 2022 +0800

    Bug Fix:
    Change the election back into single thread
    Because even in single thread,
    one round election only costs AT MOST 1 second,
    and it's much easier to ensure correctness;
    However, running each round of election in different thread
    will cause much headache about coordination

commit ac64ab2366ccc4d5ebbfad11f08f5811a9ac8f2b
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jun 29 09:52:21 2022 +0800

    Bug fix:
    Reset election timer upon elected to stop sleeping elect() thread

commit 17a3e4106c7c1c37ddf1e32332551539d502034c
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 28 18:24:17 2022 +0800

    Speed up election
    Test 2A fails after 186 rounds, so I have to find some methods to
    reduce the waiting time when start election

commit 2a81457c587eedf16f65dc7a44a7f45f7d5e8605
Merge: 3368bb4 d94ea16
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 28 16:45:01 2022 +0800

    Merge remote-tracking branch 'source/master'

commit 3368bb445766f15973afc67b2641a53b01a1cdf0
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 28 15:00:22 2022 +0800

    Make the test script more information-rich.
    Ready for rigorous tests

commit 2e0a3b2b384217858db58baeb58a640ecb4c4145
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 28 14:41:24 2022 +0800

    Remove the election restriction on commitIndex
    It's unnecessary and it will make test 2A fail
    ----
    Change the leader election command to nil,
      which is more appropriate than -1.

commit 9e0816228b9306ec330146b844224f8a580db562
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 28 12:33:40 2022 +0800

    Reset the election waiting time to  [200, 500]
    Because sometimes election test(2A) will fail
    -----
    Update test-many.sh to support -race option

commit 0e0865644ecfc0d297189d07be52d36d3003c4a9
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 28 12:17:09 2022 +0800

    Seperate the leader commands and outside commands
    And Fix a race condition
    ---------
    In the previous version, the leader will append a new log upon election,
      which will cause the upper service to read undesirable
      Raft commands.
      To avoid this, I introduced the logIndex to make commands received
      from the Start() command serial.
      When applying logs, leader command will be ignored.
      Thanks to the logIndex,
      the applied logs are consistent to the outside world,
      as if there's no leader commands.
    ----
    @kickOffElection():
    I removed the local variable `mu` and use rf.mu for concurrency control.
      And before send signal to `beLeader` channel, rf.mu should be released
      to prevent dead lock.
      Because the signal may never be read.

commit 56fedd1e7f858effc25148f5697a4196db536da5
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 28 10:35:30 2022 +0800

    Bug fix:
    Leader should append a command to the log upon election.
    See "Bug 4" in `myBugs.md`

commit fb7fae2cce9599998003fdd900c261fd7a803b1a
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 21:35:52 2022 +0800

    Add timing feature to bash script

commit 1644844ad2f2b22e6ed1eb8778e478764f15f3ff
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 21:28:35 2022 +0800

    Bug fix
    @AppendEntries()
    Adjust the order of checking args.Term and check args.CommitIndex
    Because a raft peer ALWAYS have to check for incoming RPC's term number
      and update term number before doing anything else

commit b3e6750af4c9f09ed118daed0b52e9a0d618f9cf
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 18:51:50 2022 +0800

    Impose a more strict election restriction.
    The peer will check the candidate's commit as well as currentTerm
    Because commitIndex reflects where the majority has replicated the log
      and I want to ensure that all logs before commitIndex will eventually
      be applied on every peer.
      Therefore. we cannot let some odd peers with fewer commits
      overtake the leader when the network fails
      and rewrite some committed logs.

commit 17532a6cee8791fe61106a41f99fb34dcbfaa683
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 18:10:26 2022 +0800

    Relax the timeout in the test script from 1m30s to 5m.
    Because a complete run of 2C's tests take about 150s
    on my relatively new laptop (i5-11300H, 16G RAM)

commit e2499653f485c378688cfa223b77624255817c84
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 18:00:48 2022 +0800

    The commitIndex should be persisted
    Because it records where the consensus are for the whole system.
    Optimize the nextIndex backup algorithm:
      The follower will report to the leader its commitIndex,
      so that the leader will send all logs after the commitIndex
      in one heartbeat

commit a01a7716a11e6ce04c185fe5dbe6d35054751f02
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 17:23:04 2022 +0800

    Lab 3C complete && Update test-many.sh
    --------------
    In raft.go:
    1. Remove the code to back up the commitIndex because it's not necessary
    2. Use LastLogIndex and LastLogTerm instead of commitIndex
    3. Optimize the AppendEntries. When a follower refuses the AppendEntries
      because of inconsistent log, the leader will resend the whole log
      and let the follower update itself
    4. Fix a bug in election. Before the candidate gathered enough votes,
      it may already receive a newer round of election by others.
      In this case, the candidate should exit immediately.
    -------------
    For test-many.sh:
    Because part 2C involves restarting peers, to make the log consistent,
      the raft peer will not delete the old logs,
      so I have to manually delete them in this script.

commit 0c28534094d64b094794d927695aac98b783f13b
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 12:20:26 2022 +0800

    Fix more bugs. See the report in doc/myBug.md

commit d0bbb29a62926b80dbdeb2c5e06ae7f7b63ad800
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 10:53:21 2022 +0800

    Partially passed tests in 2C
    Add illustrations on the problematic scenario

commit 6a5de1c2fb99a4f29333797aafc5a197ac406ccc
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 27 10:44:02 2022 +0800

    Add doc to illustrate the previous bug in 2B

commit 11e22cc0eb78748873e31b39630e7b252f6718b4
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jun 26 14:18:34 2022 +0800

    Amendment to 2B. Primarliy pass all tests
    line 185: The candidate should send its latest commit index
      instead of the last log index.
      A follower should vote for candidates who have the most updated
      AND committed logs, instead of candidates who
      has many uncommitted logs
    @RequestVote:
    1.Only update the time stamp when I grant the vote
      to prevent election race.
    2. Check for COMMITTED logs instead of the last log
    @ticker():
    Refactored some code
    @kickOffElection():
    The args should contain the COMMIT INDEX
    
    Other trivial chages,
      like deleting unnecessary code and making logger prettier

commit 100b478d952b7d2c4cf15c2e14b031254003c64c
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sun Jun 26 11:18:41 2022 +0800

    Improve the logging code in raft
    The voting procedure doesn't impose a valid restriction. Going to fix it
    Also, I should append an empty log when a follower becomes candidate

commit 2c524811829f73b4d8bc4eea831dfc42c3582c2d
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jun 25 20:52:22 2022 +0800

    Update raft.go
    ran TestFailAgree2B for 100 times without failure
    line 324: The Start() should return immediately,
      instead of waiting for commit
    line 395: When start election, the peer should reset the leaderID,
      so that it will NOT refuse new leader's heartbeat
    line 617: Add bound check for args.Entries[0]
    line 661: When exit leader thread, we should reset election timer
      to prevent immediate re-election
    line 671: Remove WaitGroup so that
      the leader can update its commitIndex timely.
      We cannot wait until all RPCs return
    --------
    Update the test script to test without -race
    Because race detector will fail the test
    when cfg is cleaning up the environment
         while raft is logging

commit 40ae43d78ca0924c3da6bcc930a048d9f82150d1
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jun 25 15:33:10 2022 +0800

    Passed 3 tests in 2B

commit 6afb0c317f2c9e1369612c89e151dfc5a1feca74
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Sat Jun 25 11:19:40 2022 +0800

    Implement 2B on leader side
    Fill in rf.Start so that it will return until the command is committed
    Some change to code so that it's more clear

commit 36eb3e389ef6d1113e80a30fc26cd05227145f14
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Wed Jun 22 21:48:53 2022 +0800

    Add report for lab 2A.
    update lab1.md

commit ef96be309a4bd778535b8a5fa986dbf823faf11b
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 7 16:21:28 2022 +0800

    Lab 2A solidly completed
    Each test is executed for 500 times WITHOUT FAILURE
    Add a test script for convenience

commit b77f1f3a2924d3df3ceb17f8ae470924a591acf3
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 7 15:54:38 2022 +0800

    Fix the bug that
    Leader did not stop sending heartbeat when heartbeat got rejected

commit 3499829938a411ec7caebc1abaf03ac0e3c0b9db
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue Jun 7 12:38:42 2022 +0800

    Fix the following bugs:
    Leader may not send heartbeat in 100ms
    Because it may got blocked by RPC for several seconds.
    
    I use select and goroutine to make sending and receiving async
    
    The third test sometimes fail, need further inspection

commit a8cdc4f1f539ff8ecc954e504a6efbe5e4100fc6
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon Jun 6 19:25:16 2022 +0800

    Lab 2A completed.
    Passed all tests.
    But need to repeat for many times to ensure correctness

commit 16f44e5b57cfc003f1bd84bc6780f140c448ebbc
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Tue May 31 13:48:50 2022 +0800

    Add report for lab1

commit 00bdf19903c2d228e6db2b713d684549e7e99059
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon May 30 16:08:06 2022 +0800

    Improve the algorithm of distributing tasks
    Now it consumes less time, compared to previous O(N2) time complexity

commit 15de7372493b0cd28c785958e568ddeb8284a57f
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon May 16 17:51:52 2022 +0800

    Enhanced crash test, truly random exit
    Fix a bug in coordinator. Workers should obtain total file counts

commit 906e57d9cb55bcf666a44ab048d5d0b2fdc6cc30
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Mon May 16 16:31:00 2022 +0800

    Stateless solution. Much lighter
    Passed all tests without tweak timeout

commit 6e718379e8622f3841549dea35ba98f8ad491b83
Author: Zhijing Hu <qq906555703@gmail.com>
Date:   Fri May 6 17:12:48 2022 +0800

    Lab 1 sketch set up
    1. Added necessary RPC definitions;
    2. Implemented Worker() process;
    3. Partial remote function stubs on coordinator side
    4. Have NOT considered concurrency control

commit d94ea1678082307cb5bb6a36f6cd8eb0c117614a
Author: Robert Morris <rtm@csail.mit.edu>
Date:   Wed Mar 2 04:48:31 2022 -0500

    update

commit 732981285f408f796402d4ca18d70600c37adba0
Author: Robert Morris <rtm@csail.mit.edu>
Date:   Mon Feb 28 13:35:32 2022 -0500

    update

commit a997782d1d83d27b80f62aeb79f71e8f18b6461e
Author: Cel A. Skeggs <cela@mit.edu>
Date:   Tue Feb 1 17:47:03 2022 -0500

    update

commit 46ec1a324ff24e10012eecaaaf4f63fb5dc5ca2c
Author: Robert Morris <rtm@csail.mit.edu>
Date:   Mon Jan 24 05:05:16 2022 -0500

    update

commit ad9f26ced062a35309594d365968ee20100a5b50
Author: Robert Morris <rtm@csail.mit.edu>
Date:   Sat Jan 15 06:07:17 2022 -0500

    update

commit b0a87bd25d072695efe5c51ee445ecea8c70dd19
Author: Robert Morris <rtm@csail.mit.edu>
Date:   Sat Jan 15 06:03:55 2022 -0500

    update

commit b00e438c35e0ee8fb2442cb430b55c93dea2de13
Author: Robert Morris <rtm@csail.mit.edu>
Date:   Tue Jan 11 10:56:27 2022 -0500

    update

commit 5af9fddd54945ffee2e634244413336107e17c97
Author: Robert Morris <rtm@csail.mit.edu>
Date:   Mon Jan 10 15:19:31 2022 -0500

    update
